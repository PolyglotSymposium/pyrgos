(defmodule Prelude.Either)

(deftype (Either a b)
         (Disjoint (Cons :left a)
                   (Cons :right b)))

(: Either/parse (-> SExpr (SExpr -> a) (SExpr -> b) (Either a b)))
(def (Either/parse expr f g)
    (disjoint expr
              (cons! (specific-keyword! :left) f)
              (cons! (specific-keyword! :right) g)))

(: left (-> a (Either a b)))
(def (left x)
    (cons :left x))

(: right (-> b (Either a b)))
(def (right x)
    (cons :right x))

(: Either/case (-> (Either a b) (-> a c) (-> b c) c))
(def (Either/case either f g)
    (Disjoint/case either
     ((:left . x) (f x))
     ((:right . x) (g x))))
