(module dytype (check synthesize)
  (import scheme)
  (define check
    (lambda (gamma expr type)
      (equal? type (synthesize gamma expr))
    )
  )
  (define synth-symbol
    (lambda (gamma expr)
      (let ((judgment (assq expr gamma))) (if judgment (cdr judgment) #f))
    )
  )
  (define func-type?
    (lambda (type)
      (if (and type (list? type) (eq? '-> (car type)) (list? (cdr type))) (cdr type) #f)
    )
  )
  (define synth-appl
    (lambda (gamma expr)
      (let* ((type (synthesize gamma (car expr)))
             (i-and-o (func-type? type))
            )
        (if (and i-and-o (check gamma (cdr expr) (cdr i-and-o)))
            (cdr i-and-o)
            #f
        )
      )
    )
  )
  (define synthesize
    (lambda (gamma expr)
      (cond ((symbol? expr) (synth-symbol gamma expr))
            ((pair? expr) (cond ((eq? 'lambda (car expr)) #f)
                                ((= 1 (length expr)) (synthesize gamma (car expr)))
                                (else (synth-appl gamma expr))
                          )
            ) (else #f)
      )
    )
  )
)
